# Spire Rest Dev Pipeline
pool:
    vmImage: ubuntu-latest

variables:
    OUTPUT_NAME: 'dist'

trigger:
    branches:
        exclude:
            - '*'

stages:
    - stage: build
      displayName: Prepping application
      variables:
          YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
          MODULE_CACHE_HIT: false
      jobs:
          - job: packages
            displayName: Get caches and install
            steps:
                - checkout: self
                  clean: true
                - task: NodeTool@0
                  inputs:
                      versionSpec: '14.x'
                  displayName: 'Install Node.js'
                - script: sudo yarn config set cache-folder $(YARN_CACHE_FOLDER)
                  displayName: Setting Yarn cache folder
                - task: CacheBeta@1
                  inputs:
                      key: 'node_modules | "$(Agent.OS)" | package.json'
                      path: node_modules
                      cacheHitVar: MODULE_CACHE_HIT
                  displayName: Cache Node modules
                - task: CacheBeta@1
                  condition: ne(variables.MODULE_CACHE_HIT,'true')
                  inputs:
                      key: 'yarn | "$(Agent.OS)" | yarn.lock'
                      path: $(YARN_CACHE_FOLDER)
                  displayName: Cache Yarn packages
                - script: |
                      npm config set @bit:registry https://node.bit.dev
                      yarn install --silent
                  condition: ne(variables.MODULE_CACHE_HIT,'true')
                  displayName: 'install Yarn packages'
          - job: build
            dependsOn: packages
            displayName: Build
            steps:
                - task: NodeTool@0
                  inputs:
                      versionSpec: '14.x'
                  displayName: 'Install Node.js'
                - task: CacheBeta@1
                  inputs:
                      key: 'node_modules | "$(Agent.OS)" | package.json'
                      path: node_modules
                  displayName: Retrieve Node modules cache
                - script: sudo rm --force --recursive $(System.DefaultWorkingDirectory)/$(OUTPUT_NAME)/*
                  displayName: Clearing old files
                - script: tsc
                  displayName: Build application
                - script: gulp copy
                - task: PublishPipelineArtifact@1
                  inputs:
                      targetPath: '$(System.DefaultWorkingDirectory)/$(OUTPUT_NAME)'
                      artifactName: $(OUTPUT_NAME)
                  displayName: Publish artifacts for deployment

    - stage: devDeployment
      condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'],'dev'),eq(variables['Build.SourceBranchName'],'better-clean')))
      displayName: Deploying to Dev servers
      jobs:
          - deployment: SpireDevVMDeploy
            displayName: Deploy to Dev cluster
            workspace:
                clean: all
            environment:
                name: Dev
                resourceType: VirtualMachine
                tags: spire
            strategy:
                rolling:
                    maxParallel: 50%
                    deploy:
                        steps:
                            - script: (! find $PIPELINE_WORKSPACE/$OUTPUT_NAME/api/endpoints -name customer* -type f )
                            - checkout: self
                              submodules: recursive
                              clean: true
                            - script: (! find $PIPELINE_WORKSPACE/$OUTPUT_NAME/api/endpoints -name customer* -type f )
                            - task: CacheBeta@1
                              inputs:
                                  key: 'node_modules | "$(Agent.OS)" | package.json'
                                  path: node_modules
                              displayName: Retrieve Node modules cache
                            - script: (! find $PIPELINE_WORKSPACE/$OUTPUT_NAME/api/endpoints -name customer* -type f )
                            - script: |
                                  mkdir --verbose ~/rest
                                  sudo pm2 stop dev-rest
                                  sudo rm --force ~/rest/*
                                  sudo cp --recursive --force --verbose $PIPELINE_WORKSPACE/$OUTPUT_NAME ~/rest
                                  sudo cp --recursive --force ./node_modules ~/rest
                                  sudo cp --force --verbose ./ecosystem.config.js ~/rest
                            - script: |
                                  cd ~/rest
                                  printenv CONFIG_FILE >"./config.json"
                                  sudo pm2 startOrReload ecosystem.config.js --only dev-rest
                              env:
                                  CONFIG_FILE: $(DEV_CONFIG)
